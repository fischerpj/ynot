[
  {
    "objectID": "posts/bible-access/index.html",
    "href": "posts/bible-access/index.html",
    "title": "Bible access",
    "section": "",
    "text": "Give access to Bible Texts, version, display, search, pdf as well as to Strong_Numbers and Bible sites. The refs’ full syntax respects “canon”:“ps1:1-3!SG21@bgw”. Workflow is 1.input 2.button.listener 3.iframe.src gets updated. Conclusion: Keep the Input+Button; Use the &lt;iframe for exploration\n\n  Get API"
  },
  {
    "objectID": "posts/jsfapi/index.html",
    "href": "posts/jsfapi/index.html",
    "title": "jsfapi",
    "section": "",
    "text": "jsfapi is the raw json API to BibleGateway, hosted by netlify.\n\nhere with outdated technology of iframe which is R_independent! Develop this feature with comments."
  },
  {
    "objectID": "posts/observables/index.html",
    "href": "posts/observables/index.html",
    "title": "Observables",
    "section": "",
    "text": "We demonstrate interactions with ObservableJS Inputs.text, Input.button in a quarto document. And abandon due to CSS styling complexity.\nimport { Inputs } from \"@observablehq/inputs\";\nimport { html } from \"@observablehq/stdlib\";\n\n// Create an input field for the parameter\nviewof param = Inputs.text({ \n  label: \"Search\", \n  placeholder: \"Type here...\" ,\n  value: \"gen1:1\"\n});\n\n// Construct the API URL using the input parameter\nmyurl = `https://hall.pjafischer.workers.dev/passage/?param=${param}`;\n\n// Fetch the data dynamically\nmydata = (await fetch(myurl)).json();\n\n// Display the htmlraw property inside a div\nhtml`${mydata.htmlraw}`;"
  },
  {
    "objectID": "posts/observables/index.html#inputs.text",
    "href": "posts/observables/index.html#inputs.text",
    "title": "Observables",
    "section": "Inputs.text",
    "text": "Inputs.text\n\nviewof userInput = Inputs.text({\n  label: \"Enter\",\n  placeholder: \"Type here\",\n  value: \"Initial text\"\n})\n\n// Display the input value\nuserInput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nendpoint = \"https://jsfapi.netlify.app/.netlify/functions/bgw\"\nurl = endpoint+\"?param=\"+userInput\nurl"
  },
  {
    "objectID": "posts/observables/index.html#button.click",
    "href": "posts/observables/index.html#button.click",
    "title": "Observables",
    "section": "button.click",
    "text": "button.click\n\nviewof myButton = Inputs.button(\"Count me!\");\n\n// By default, shows the #clicks\nmyButton\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmyHtml = html`&lt;div&gt;\n  &lt;h1&gt;Hello, Observable!&lt;/h1&gt;\n  &lt;p&gt;This is a paragraph followed by AN IFRAME within a div element.&lt;/p&gt;\n  &lt;iframe src=\"https://jsfapi.netlify.app/.netlify/functions/bgw?param=gen1:1!SG21\" title=\"STATIC IFRAME jsfapi\" width=\"400\" height=\"150\"&gt;\n&lt;/div&gt;`;\n\n// Display the HTML element\nmyHtml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Fetch the data dynamically mydata = (await fetch(myurl)).json();\n// Display the htmlraw property inside a div html${mydata.htmlraw}; ```"
  },
  {
    "objectID": "posts/note_prophete/index.html",
    "href": "posts/note_prophete/index.html",
    "title": "Note Prophete",
    "section": "",
    "text": "This is a Global Note, using EditorJS and localStorage autosave mechanism.\n\n\n\n\nimport { Inputs } from \"@observablehq/inputs\";\nimport { html } from \"@observablehq/stdlib\";\nimport { Bcve, Ref } from \"./BibleBooksCodes_Tables.js\";\n\n_STORAGE_KEY = \"prophete\";\n\n//================== 1. INPUTS\n// Editable input field\nviewof RefInput = Inputs.text({\n  label: \"Search\", \n  value: \"ps42:1!KJV\",\n  style: \"width: 150px;\"\n  })\n\n// Inputs\n/*viewof RefInput = html`&lt;input type=\"text\" \n//  class=\"form-control\" \n  label= \"Search\" \n  style=\"width: 150px;\"\n  value=\"ps40\"/&gt;`;  \n*/\n\n//================== 2. ACCUMULATION\nviewof RefAccu = Inputs.button(\"Keep\", {\n    value: JSON.parse(localStorage.getItem(_STORAGE_KEY)) || [],\n    reduce: (list) =&gt; {\n      const input = viewof RefInput.value;\n      const validated = new Bcve(input);\n      const result = validated.is_valid ? [validated.param, ...list ] : [...list]\n      localStorage.setItem(_STORAGE_KEY, JSON.stringify(result));\n      return result\n  //    return [validated.param, ...list ]\n      }\n    });\n\ndummy = { \n  viewof RefInput.classList.add(\"form-control\");\n  viewof RefAccu.classList.add(\"btn\", \"btn-warning\");\n}\n\n// VIEWOF\nhtml`&lt;div class=\"button-row\"&gt;\n  ${viewof RefInput}\n  ${viewof RefAccu}\n  &lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefPreview = {\n  const mb = new Bcve(RefInput);\n  \n  if (mb.is_valid) {\n    const mir = new Ref(mb.param);\n    await mir.fetch_parallel();   // Wait for data to be fetched\n    await mir.data;\n    await mir.displayData(); \n    return mir.outputContent;\n  } else {\n    return `&lt;div&gt;&lt;ul&gt;&lt;li&gt;${mb.param}&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;`  \n  }\n}\n\nhtml`${RefPreview}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefData = {\n  // DATA is imported from BibleBooksCodes_Tables.js\n//      const refArray =  RefAccu;\n      const mir = new Ref(RefAccu);\n      await mir.fetch_parallel();   // Wait for data to be fetched\n//      await mir.displayData(); \n//      const displayContent = mir.outputContent;\n//      return await mir\n    return await mir.data\n}\n\n//RefData;\n\n// Display the list\nhtml`&lt;ul&gt;${RefData.map(item =&gt; html`&lt;li&gt;&lt;strong&gt;${item.ref}&lt;/strong&gt; ${item.content} &lt;em&gt;${item.version}&lt;/em&gt;&lt;/li&gt;`)}&lt;/ul&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthis is inputDiv\n\n\n\n\n\nthis is editorDiv\nJésus est plus grand que les prophètes.\nUn prophète transmet les messages de Dieu, sur les sujets d’actualité ou d’avenir. Il est appelé voyant parce qu’il perçoit les réalités invisibles."
  },
  {
    "objectID": "posts/bible-api/index.html",
    "href": "posts/bible-api/index.html",
    "title": "bible API",
    "section": "",
    "text": "Bible API technologies.\n\n\n\n\n\n\nconsole.log(\"toto\")\nconst app = new App();\n\n// app.m_fetchPassage(\"ps42!KJV\");\n\n\n\nconsole.log(\"toto2\")\nfetchData(\"ps42!KJV\");"
  },
  {
    "objectID": "posts/DOM via Javascript/index.html",
    "href": "posts/DOM via Javascript/index.html",
    "title": "DOM via Javascript",
    "section": "",
    "text": "Modify the DOM: take an input, trigger a button, echo the value.\n\n\n\nSubmit\n\n\n\n\n\nUpdate an iframe’s content via its src attribute.\n\n Display  \n\n\nConclusion: Abandon ObersvableJS technology because of CSS-styling hurdle."
  },
  {
    "objectID": "posts/gospel-banner/index.html",
    "href": "posts/gospel-banner/index.html",
    "title": "gospel banner",
    "section": "",
    "text": "The animated web presentation of biblical claims is posted at https://xminpi.netlify.app/ppt/gospel-banner/\n\nCapture additional content under comments."
  },
  {
    "objectID": "posts/notes/index.html",
    "href": "posts/notes/index.html",
    "title": "notes",
    "section": "",
    "text": "I merely capture at random my ideas here as comments below."
  },
  {
    "objectID": "posts/cke/index.html",
    "href": "posts/cke/index.html",
    "title": "Welcome To EditorJS",
    "section": "",
    "text": "Proof of Concept of EditorJS\n\nThis is the first SUCCESSFUL post in a Quarto blog to a) use EditorJS and b) localStorage autosave mechanism.\nrelies on yaml =&gt; format: html: include: include-on-header:\n\nEditor.js in Node.js\n\n\n\n\nit’s to be class: EditorjsList, Hey!\nSave Content Load Content"
  },
  {
    "objectID": "posts/etoile/index.html",
    "href": "posts/etoile/index.html",
    "title": "résidence Etoile",
    "section": "",
    "text": "Point de départ de l’habitation au Clos de l’Etoile"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/bibGrid/index.html",
    "href": "posts/bibGrid/index.html",
    "title": "bibGrid",
    "section": "",
    "text": "Grid of Bible Books, Abbreviations, Chapter_Max.\n\n\ninputDiv is considered Void\n\n\nimport { html } from \"@observablehq/stdlib\";\n\n// Inputs\nviewof userRef_new = html`&lt;input type=\"text\" \n  class=\"form-control\" \n  style=\"width: 150px;\"\n  value=\"ps40:1!KJV\"/&gt;`;\n  \n// VIEWOF\nhtml`&lt;div class=\"row container\"&gt;\n  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  ${viewof userRef_new}\n  &lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Ref, Bcve, Books, BibleBooksCodes } from \"./ref.js\";\n\n//valid_param = userRef_new;\n\nvalid_param = {\n  const mb = new Bcve(userRef_new);\n//  return mb;\n///  const BBC = new BibleBooksCodes();\n//  return BBC.getBBBFromText(mb.book);\n  return mb.param\n}\n\n// VIEWOF\nhtml`&lt;div class=\"row container\"&gt;\n  Validation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  ${valid_param}\n  &lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nany output comes here"
  },
  {
    "objectID": "posts/storage/index.html",
    "href": "posts/storage/index.html",
    "title": "Storage with Javascript",
    "section": "",
    "text": "Demonstrate the feasibility of user interaction (input, action) with LocalStorage (set, get).\n\n\nModify the DOM: take an input, trigger a button to echo the value and save to LocalStorage\n\n\n\nSubmit to LocalStorage\n\n\n\n\nRead Back from LocalStorage: Trigger the retrieval and echo the value\n\n\nRetrieve from LocalStorage\n\n\n\nOne script inserted here handles that all.\n\n\nmake it a content script extension."
  },
  {
    "objectID": "posts/accuVerse/index.html",
    "href": "posts/accuVerse/index.html",
    "title": "accuVerse",
    "section": "",
    "text": "Resume 2534 as merger of fastCheck and adVerse2\n\n\ninputDiv is considered Void\n\n\nimport { Inputs } from \"@observablehq/inputs\";\nimport { html } from \"@observablehq/stdlib\";\nimport { Bcve, Ref } from \"./BibleBooksCodes_Tables.js\";\n\n\n//================== 1. INPUTS\n// Editable input field\nviewof RefInput = Inputs.text({\n  value: \"ps42:1!KJV\"\n  })\n\n//================== 2. VALIDATION\nviewof RefAccu = Inputs.button(\"Append\", {  \n    value: [],\n    reduce: (list) =&gt; {\n      const input = viewof RefInput.value;\n      const validated = new Bcve(input);\n      const result = validated.is_valid ? [validated.param, ...list ] : [...list]\n      return result\n  //    return [validated.param, ...list ]\n      }\n    });\n\n// VIEWOF\nhtml`&lt;div class=\"row container\"&gt;\n  Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  ${viewof RefInput}\n  ${viewof RefAccu}\n  &lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefData = {\n  // DATA is imported from BibleBooksCodes_Tables.js\n//      const refArray =  RefAccu;\n      const mir = new Ref(RefAccu);\n      await mir.fetch_parallel();   // Wait for data to be fetched\n//      await mir.displayData(); \n//      const displayContent = mir.outputContent;\n//      return await mir\n    return await mir.data\n}\n\n//RefData;\n\n// Display the list\nhtml`&lt;ul&gt;${RefData.map(item =&gt; html`&lt;li&gt;&lt;strong&gt;${item.ref}&lt;/strong&gt; ${item.content} &lt;em&gt;${item.version}&lt;/em&gt;&lt;/li&gt;`)}&lt;/ul&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nany output comes here\n\n\nok RefInput\nValidRef =&gt;fetch display RT in previewDiv\nRefAccu =&gt; refArray+ validRef\nAccuArray display json\n=&gt; Réf collection fetch\nContentArray \nOutput.div append …li"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Ynot (Why not!) is my personal gitHub repo to store infos as issues, that are anchored to any pages of my other websites.\nYnot is sourced from docker rv5/ynot..\n\n\n\n\n\n\n\n\n\n\n\n\nbible look\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\naccuVerse\n\n\n\n\n\n\n\n\n\n\n\nAug 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nverses\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nStorage with Javascript\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Note\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2025\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nbibGrid\n\n\n\n\n\n\n\n\n\n\n\nJul 9, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nexcursions\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\nRomans Note\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrésidence Etoile\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nimmobilier\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To EditorJS\n\n\n\n\n\n\n\n\n\n\n\nMay 16, 2025\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To CKeditor\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\npriorités\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\ngospel banner\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nraw content\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nDOM via Javascript\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nmemo_verse\n\n\n\n\n\n\n\n\n\n\n\nDec 28, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nbible API\n\n\n\n\n\n\n\n\n\n\n\nMay 22, 2025\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nSuccession\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nNote Prophete\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2025\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nIframe\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nObservables\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nIT\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\njsfapi\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\ncuisine\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2024\n\n\ngranPiero\n\n\n\n\n\n\n\n\n\n\n\n\nBible access\n\n\n\n\n\n\n\n\n\n\n\nMay 21, 2025\n\n\ngranPiero\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/bible-look/index.html",
    "href": "posts/bible-look/index.html",
    "title": "bible look",
    "section": "",
    "text": "Bible Search and Lookup technologies."
  },
  {
    "objectID": "posts/verseRun/index.html",
    "href": "posts/verseRun/index.html",
    "title": "verses",
    "section": "",
    "text": "Instant & Persistent Bible Verses , thanks to reactive observableJS branch of accuVerse. Test Abbreviations\n\n\n\n\n\nimport { Inputs } from \"@observablehq/inputs\";\n\n\n\n\n\n\n\nimport { html } from \"@observablehq/stdlib\";\nimport { Bcve, Ref } from \"./BibleBooksCodes_Tables.js\";\n\n_STORAGE_KEY = \"prophete\";\n_STORAGE_VALUE = JSON.parse(localStorage.getItem(_STORAGE_KEY)) || ['gal2:20!KJV'];\n\n// LEGACY was better\n/*\n// INPUT\nviewof userRef = html`\n  &lt;input \n    type=\"text\" \n//    oninput=\"this.dispatchEvent(new CustomEvent('input'))\" \n    value= \"num1:1!KJV\"\n    class=\"form-control\" \n    style=\"width: 150px;\"\n    &gt;`\n\n// TRIGGER    \nviewof appendButton = html`\n  &lt;button class=\"btn btn-primary\"&gt;Append&lt;/button&gt;`\n\n// VIEWOF\nhtml`&lt;div class=\"row container\"&gt;\n  Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  ${viewof userRef}\n  ${viewof appendButton}\n  &lt;/div&gt;`\n*/\n\n//================== 1. INPUTS\n// Editable input field\nviewof RefInput = Inputs.text({\n  value: _STORAGE_VALUE[Math.floor(Math.random() * _STORAGE_VALUE.length)],\n  style: \"width: 140px;\"\n  })\n\n// Inputs\n/*viewof RefInput = html`&lt;input type=\"text\" \n//  class=\"form-control\" \n  label= \"Search\" \n  style=\"width: 150px;\"\n  value=\"ps40\"/&gt;`;  \n*/\n\n//================== 2. ACCUMULATION\nviewof HelpButton =  Inputs.button(\"Help\");\n\nbcve = new Bcve(RefInput);\nbcve;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof RefAccu = Inputs.button(\"Keep\", {\n    value: _STORAGE_VALUE,\n    reduce: (list) =&gt; {\n      const input = viewof RefInput.value;\n      const validated = new Bcve(input);\n      const result = validated.is_valid ? [validated.param, ...list ] : [...list]\n      const uniqueResult = [...new Set(result)];\n      localStorage.setItem(_STORAGE_KEY, JSON.stringify(uniqueResult));\n      return uniqueResult\n  //    return [validated.param, ...list ]\n      }\n    });\n\nrestyling = {\n  // Very Great\n  const mib = viewof RefAccu.querySelector('button.btn-quarto');\n  if (mib) {\n    mib.classList.remove('btn-quarto');\n    mib.classList.add('btn-warning');\n  }  \n  \n  const hbut = viewof HelpButton.querySelector('button.btn-quarto');\n  if (hbut) {\n    hbut.classList.remove('btn-quarto');\n    hbut.classList.add('btn-info');\n  }  \n  \n//  viewof RefInput.classList.remove(\"form-control\");\n\n  const mii = viewof RefInput.querySelector('div');\n  if (mii) {\n    mii.classList.add(\"form-control\");\n  }\n  \n  const inp = mii.querySelector('input');\n  if (inp) {\n    inp.style.border = \"none\";\n    inp.style.outline = \"none\";\n  }\n}\n\ndummy = { \n//  viewof RefInput.classList.add(\"form-control\");\n  viewof RefAccu.classList.add(\"btn\", \"btn-warning\");\n  viewof HelpButton.classList.add(\"btn\", \"btn-info\");\n}\n\n// VIEWOF\n//html`&lt;div class=\"button-row\"&gt;\nhtml`&lt;div class=\"row container\"&gt;\n  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  ${viewof RefInput}\n  ${viewof RefAccu}\n  ${viewof HelpButton}\n  &lt;/div&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefPreview = {\n  const mb = new Bcve(RefInput);\n  \n  if (mb.is_valid) {\n    const mir = new Ref(mb.param);\n    await mir.fetch_parallel();   // Wait for data to be fetched\n    await mir.data;\n    await mir.displayData(); \n    return mir.outputContent;\n  } else {\n    return `&lt;div&gt;&lt;ul&gt;&lt;li&gt;${mb.param}&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;`  \n  }\n}\n\nhtml`${RefPreview}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefData = {\n  // DATA is imported from BibleBooksCodes_Tables.js\n//      const refArray =  RefAccu;\n      const mir = new Ref(RefAccu);\n      await mir.fetch_parallel();   // Wait for data to be fetched\n//      await mir.displayData(); \n//      const displayContent = mir.outputContent;\n//      return await mir\n    return await mir.data\n}\n\n//RefData;\n\n// Display the list\n//html`&lt;ul&gt;${RefData.map(item =&gt; html`&lt;li&gt;&lt;details&gt;&lt;summary&gt;&lt;strong&gt;${item.ref} &lt;/strong&gt; ${item.content.slice(0,40)} ...&lt;/summary&gt;&lt;p&gt;${item.content} &lt;em&gt;${item.version}&lt;/em&gt;&lt;/p&gt;&lt;/details&gt;&lt;/li&gt;`)}&lt;/ul&gt;`\n\nhtml`${RefData.map(item =&gt; html`&lt;details&gt;&lt;summary&gt;&lt;strong&gt;${item.ref} &lt;/strong&gt;&lt;span style='font-size: 0.9em;'&gt;&lt;em&gt; ${item.content.slice(0,60)} ...&lt;/em&gt;&lt;/span&gt;&lt;/summary&gt;&lt;p&gt;${item.content} &lt;em&gt;${item.version}&lt;/em&gt;&lt;/p&gt;&lt;/details&gt;`)}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJésus est plus grand que les prophètes.\nUn prophète transmet les messages de Dieu, sur les sujets d’actualité ou d’avenir. Il est appelé voyant parce qu’il perçoit les réalités invisibles."
  },
  {
    "objectID": "posts/global-note/index.html",
    "href": "posts/global-note/index.html",
    "title": "Global Note",
    "section": "",
    "text": "This is a Global Note, using EditorJS and localStorage autosave mechanism.\n\n\nthis is inputDiv\nthis is editorDiv"
  },
  {
    "objectID": "posts/excursions/index.html",
    "href": "posts/excursions/index.html",
    "title": "excursions",
    "section": "",
    "text": "The root of discoveries.\n\n\nmagnifique Cathédrale Saint-Pierre à Montpellier, érigée par le Pape Urban V.\nMarrons à Brenas le 20 octobre 2024, près de Vernazoubres."
  },
  {
    "objectID": "posts/romans_note/index.html",
    "href": "posts/romans_note/index.html",
    "title": "Romans Note",
    "section": "",
    "text": "This is a Global Note on Romans (using EditorJS and localStorage autosave mechanisms)\n\n\nthis is inputDiv\nthis is editorDiv"
  },
  {
    "objectID": "posts/immobilier/index.html",
    "href": "posts/immobilier/index.html",
    "title": "immobilier",
    "section": "",
    "text": "Point de départ du projet d’habitation à Montpellier.\n\nhttps://www.avendrealouer.fr/professionnels/montpellier-34/loc-101-16124.html\nhttps://www.seloger.com/classified-search?distributionTypes=Buy,Buy_Auction&estateTypes=House&locations=AD08FR13752"
  },
  {
    "objectID": "posts/cke/index_cke.html",
    "href": "posts/cke/index_cke.html",
    "title": "Welcome To CKeditor",
    "section": "",
    "text": "Concept of CKEditor\n\nThis is the first post in a Quarto blog to use CKeditor.\nHas format: html: include: include-on-header:\nHas also html: comments: utterances: repo:"
  },
  {
    "objectID": "posts/priorités/index.html",
    "href": "posts/priorités/index.html",
    "title": "priorités",
    "section": "",
    "text": "Organise the tree of priorities\n\nimportant first"
  },
  {
    "objectID": "posts/memo_verse/index.html",
    "href": "posts/memo_verse/index.html",
    "title": "memo_verse",
    "section": "",
    "text": "This is on-your-device-only-persistent-memory of bible references, that you accumulate on the fly. However one distinct memory zone per browser"
  },
  {
    "objectID": "posts/succession/index.html",
    "href": "posts/succession/index.html",
    "title": "Succession",
    "section": "",
    "text": "Everything related to succession Fischer-Durrenberger."
  },
  {
    "objectID": "posts/iframe/index.html",
    "href": "posts/iframe/index.html",
    "title": "Iframe",
    "section": "",
    "text": "First use of an iframe element to display src = https://jsfapi.netlify.app/.netlify/functions/bgw?param=ps42:5!KJV\n\n\n\nConclusion: we abandon iframe technology."
  },
  {
    "objectID": "posts/IT/index.html",
    "href": "posts/IT/index.html",
    "title": "IT",
    "section": "",
    "text": "Everything related to technology."
  },
  {
    "objectID": "posts/cuisine/index.html",
    "href": "posts/cuisine/index.html",
    "title": "cuisine",
    "section": "",
    "text": "Recettes de cuisine éprouvées."
  }
]