---
title: "verses"
date: "2025-09-02"
image: "hurdler.jpg"
format: 
  html:
    comments:
      utterances: 
        repo: "fischerpj/ynot"
execute:
  echo: false
---

> **Instant & Persistent Bible Verses** , thanks to reactive *observableJS* branch of accuVerse. Test Abbreviations; ToDo: outputDivArea

::: {#inputDiv}
<!-- inputDiv is considered Void-->
:::

```{ojs}
import { Inputs } from "@observablehq/inputs";

```

```{ojs}
import { html } from "@observablehq/stdlib";
import { Bcve, Ref } from "./BibleBooksCodes_Tables.js";

_STORAGE_KEY = "prophete";
_STORAGE_VALUE = JSON.parse(localStorage.getItem(_STORAGE_KEY)) || ['gal2:20!KJV'];

//================== 1. INPUTS
// Editable input field
viewof RefInput = Inputs.text({
  value: _STORAGE_VALUE[Math.floor(Math.random() * _STORAGE_VALUE.length)],
  style: "width: 140px;"
  })
  
//================== 2. BUTTONS
viewof RefAccu = Inputs.button("Add", {
    value: _STORAGE_VALUE,
    reduce: (list) => {
      const input = viewof RefInput.value;
      const validated = new Bcve(input);
      console.log(validated);
      const result = validated.is_valid ? [validated.param, ...list ] : [...list]
      const uniqueResult = [...new Set(result)];
      localStorage.setItem(_STORAGE_KEY, JSON.stringify(uniqueResult));
      return uniqueResult
  //    return [validated.param, ...list ]
      }
    });

RefAccu;

//viewof HelpButton =  Inputs.button("Help");

/*
viewof CopyButton =  Inputs.button("Refs",{
    value: null,
    reduce: () => { 
//      const minData = RefData.map( (record) => record.ref);
      // Copy to clipboard
      navigator.clipboard.writeText(JSON.stringify(RefAccu))
        .then(() => console.log('Copied to clipboard!'))
       .catch(err => console.error('Failed to copy:', err));
    }
});
*/
```

```{ojs}
restyling = {
  const a = 0;
/*
  // Very Great
  const miaccu = viewof RefAccu.querySelector('button.btn-quarto');
  if (miaccu) {
    miaccu.classList.remove('btn-quarto');
    miaccu.classList.add('btn-warning');
  }  
*/  
/*  
  const mihelp = viewof HelpButton.querySelector('button.btn-quarto');
  if (mihelp) {
    mihelp.classList.remove('btn-quarto');
    mihelp.classList.add('btn-info');
  }  
  
  const micop = viewof CopyButton.querySelector('button.btn-quarto');
  if (micop) {
    micop.classList.remove('btn-quarto');
    micop.classList.add('btn-success');
  }  
//  viewof RefInput.classList.remove("form-control");

  const mii = viewof RefInput.querySelector('div');
  if (mii) {
    mii.classList.add("form-control");
  }
  
  const inp = mii.querySelector('input');
  if (inp) {
    inp.style.border = "none";
    inp.style.outline = "none";
  }
*/  
}

/*
dummy = { 
//  viewof RefInput.classList.add("form-control");
  viewof RefAccu.classList.add("btn", "btn-warning");
  viewof HelpButton.classList.add("btn", "btn-info");
  viewof CopyButton.classList.add("btn", "btn-success");
}
*/

/*
html`<div class="row container">
   Lookup&nbsp;&nbsp;&nbsp;&nbsp;
   ${viewof RefInput}
</div>
<div class="button-row">
    ${viewof RefAccu}
    ${viewof CopyButton}
    ${viewof HelpButton}
  </div>`
*/

//RefAccu;
```

```{ojs}
//================== INPUT PREVIEW
RefPreview = {
  const mb = new Bcve(RefInput);
  
  if (mb.is_valid) {
    const mir = new Ref(mb.param);
    await mir.fetch_parallel();   // Wait for data to be fetched
    await mir.data;
    await mir.displayData(); 
    return mir.outputContent;
  } else {
    return `<div><ul><li>${mb.param}</li></ul></div>`  
  }
}

RefPreview;

//html`${await RefPreview}`

// Display the list
//html`<ul>${RefData.map(item => html`<li><strong>${item.ref}</strong> ${item.content} <em>${item.version}</em></li>`)}</ul>`
```

```{ojs}
//================== 3. FETCH

RefData = {
  // DATA is imported from BibleBooksCodes_Tables.js
//      const refArray =  RefAccu;
      const mir = new Ref(RefAccu);
      await mir.fetch_parallel();   // Wait for data to be fetched
//      await mir.displayData(); 
//      const displayContent = mir.outputContent;
//      return await mir
    const miresult = await mir.data
//    navigator.clipboard.writeText(miresult)
    return miresult
}

//RefData;

/*
// Display the list with DETAILS / summary
html`${RefData.map(item => html`<details><summary><strong>${item.ref} </strong><span style='font-size: 0.9em;'><em> ${item.content.slice(0,45)} ...</em></span></summary><p>${item.content} <em>${item.version}</em></p></details>`)}`
*/
```

:::: {#outputDiv}
<div>

<!--  any output comes here to outputDiv is considered Void-->

</div>
::::

Jésus est plus grand que les prophètes.

Un prophète transmet les messages de Dieu, sur les sujets d'actualité ou d'avenir. Il est appelé voyant parce qu'il perçoit les réalités invisibles.
