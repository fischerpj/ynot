---
title: "adVerse"
date: "2025-07-08"
categories: [bible]
image: "f1car.jpeg"
execute:
  echo: false
---

> mix of *observableJS* (e.g. import class!, fetch&display).

::: {#inputDiv}
inputDiv is considered Void
:::

```{ojs}
import { html } from "@observablehq/stdlib";

// Inputs
viewof userRef_new = html`<input type="text" 
  class="form-control" 
  style="width: 150px;"
  value="ps40:1!KJV"/>`;
  
// VIEWOF
html`<div class="row container">
  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${viewof userRef_new}
  </div>`  
```

```{ojs}
valid_param = userRef_new;

// VIEWOF
html`<div class="row container">
  Validation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${valid_param}
  </div>`  
```

::: {#outputDiv}
any output comes here
:::

```{ojs}
import { Ref, Bcve, Books, BibleBooksCodes } from "./ref.js";
// FUNCTIONS are in BibleBooksCodes.js, a Module handling BibleBooksCodes functions.

miRef = { 
  const mi = new Ref(userRef_new);
  await mi.fetch_parallel();   // Wait for data to be fetched
  mi.displayData();
  return mi; // Return the object as the cell's value
}
miRef;

mbcv = {
  const mb = new Bcve(userRef_new);
  mb.hi()
  return mb;
}
mbcv;

mbooks = {
  const mbk = new Books();
  return mbk;
}
mbooks;

bbc = {
  mbcv;
  // DATA is imported from BibleBooksCodes_Tables.js
  const BBC = new BibleBooksCodes();
  //	console.log(BBC.whoami_());
  const BBClist	= BBC.getBBBlist();
  const BBCsample = BBC.getBBBsample_(2);
//  console.log(BBC.getBBBFromText(mbcv.book));
  return BBC.getBBBFromText(mbcv.book)
}
bbc;

```
