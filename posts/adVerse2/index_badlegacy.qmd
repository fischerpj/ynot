---
title: "adVerse2"
date: "2025-08-15"
image: "f1car.jpeg"
execute:
  echo: false
---

> *observableJS* mixing import class, fetch&display.

::: {#inputDiv}
any input comes here
:::

```{ojs}
//================== INPUT
import { html } from "@observablehq/stdlib";

// Inputs
viewof userRef_new = html`<input type="text" 
  class="form-control" 
  style="width: 150px;"
  value="ps40"/>`;
  
// VIEWOF
html`<div class="row container">
  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${viewof userRef_new}
  </div>`  
```

```{ojs}
//================== VALIDATION

//valid_param = userRef_new;

valid_param = {
  const mb = new Bcve(userRef_new);
//  return mb;
////  const BBC = new BibleBooksCodes();
//  return BBC.getBBBFromText(mb.book);
  return mb
}

valid_param;
/*
// VIEWOF
html`<div class="row container">
  Validation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${valid_param}
  </div>`
*/  
```

::: {#outputDiv}
any output comes here
:::

```{ojs}
import { Bcve } from "./ref.js";
// FUNCTIONS are in BibleBooksCodes.js, a Module handling BibleBooksCodes functions.


mbcv = {
  const mb = new Bcve(userRef_new);
//  return mb;
//  const BBC = new BibleBooksCodes();
//  return BBC.getBBBFromText(mb.book);
  return mb
}

/*
miRef = { 
  const mb = new Bcve(userRef_new);
  const mi = new Ref(mb.param);
  await mi.fetch_parallel();   // Wait for data to be fetched
  mi.displayData();
  return mi; // Return the object as the cell's value
}
miRef;
*/
/*
mbooks = {
  const mbk = new Books();
  return mbk;
}
mbooks;
*/


```

```{ojs}
import { Ref, Books, BibleBooksCodes, tidyBBBs, tidyBBB } from "./ref.js";

// array of multiple refs to fetch in parallel
bbc = {
  // DATA is imported from BibleBooksCodes_Tables.js
  const BBC = new BibleBooksCodes();
  const BBClist	= BBC.getBBBlist();
  const BBCsample = BBC.getBBBsample_(24);

  const BBCosis = BBC.getBBBosis_(BBCsample);
//  return BBC.getBBBneg_(BBCsample);
  const tibbb = BBCsample.map((x) => tidyBBB(x)+"1:1");
  console.log(tibbb);
  const mi = new Ref(tibbb);
  await mi.fetch_parallel();   // Wait for data to be fetched
  await mi.displayData();
//  BBC.getSingleChapterBooksList() 
  return  mi

//  const BBCneg = BBC.getBBBneg_(BBCsample);
//  return BBC.getBBBFromText(mbcv.book)
//  console.log(BBC.getBBBFromText(mbcv.book));
//  return BBCsample;
//  return BBC.getNEGAbbreviation("GEN")
}
bbc;
```
