---
title: "adVerse2"
date: "2025-08-17"
image: "f1car.jpeg"
execute:
  echo: false
---

> *observableJS* mixing import class from BibleBooksCodes_Tables.js, target minhall fetch&display. DO: fix BBCstatic

::: {#inputDiv}
any input comes here
:::

```{ojs}
//================== INPUT
import { html } from "@observablehq/stdlib";

// Inputs
viewof userRef_new = html`<input type="text" 
  class="form-control" 
  style="width: 150px;"
  value="ps40"/>`;
  
// VIEWOF
html`<div class="row container">
  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${viewof userRef_new}
  </div>`  

// userRef_new;  
```

::: {#outputDiv}
any output comes here
:::

```{ojs}
// DATA is imported from BibleBooksCodes_Tables.js
import { Bcve, BibleBooksCodes } from "./BibleBooksCodes_Tables.js";

//================== VALIDATION
valid_param = {
  const mb = new Bcve(userRef_new);
  return mb
}

valid_param;
```

```{ojs}
import { Ref, Books, tidyBBBs, tidyBBB } from "./BibleBooksCodes_Tables.js";

// array of multiple refs to fetch in parallel
bbc = {
  // DATA is imported from BibleBooksCodes_Tables.js
  const BBC = new BibleBooksCodes();
  const BBClist	= BBC.getBBBlist();
  const BBCsample = BBC.getBBBsample_(24);

  const BBCosis = BBC.getBBBosis_(BBCsample);
//  return BBC.getBBBneg_(BBCsample);
  const tibbb = BBCsample.map((x) => tidyBBB(x)+"1:1");
  console.log(tibbb);
  const mi = new Ref(tibbb);
  await mi.fetch_parallel();   // Wait for data to be fetched
  await mi.displayData();
//  BBC.getSingleChapterBooksList() 
  return  mi

//  const BBCneg = BBC.getBBBneg_(BBCsample);
//  return BBC.getBBBFromText(mbcv.book)
//  console.log(BBC.getBBBFromText(mbcv.book));
//  return BBCsample;
//  return BBC.getNEGAbbreviation("GEN")
}
bbc;

```
