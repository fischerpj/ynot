---
title: "bCheck"
image: "bugsbunny.png"
format: html
execute:
  echo: false
---

> plain BCV.js function

::: {#inputDiv}
inputDiv is considered Void
:::

```{=html}
<script>



// Example usage
/*
document.addEventListener("DOMContentLoaded", function () {
    const message = bcv_(JSON.stringify(editions_()));
    console.log(message);

    // Optionally inject into page:
    const output = document.createElement("p");
    output.textContent = message;
    document.body.appendChild(output);
  });
*/

</script>
```

```{ojs}
// Traditional pure JS utility functions

// A simple JavaScript function named 'bcv'
function bcv_(arg) {
     const canon = {
       ref: arg,
       canon: "!" + edition_(arg)
     };
    const miref = ref_(arg);
    return  { ...canon, ...miref }
}    

// valid edition  
function edition_(ref) {
  const edition = ref.split(/!/,2).reverse()[0].toUpperCase();
  const editions = editions_();

   switch (true) {
   case edition === "":
      return "ESV"
    case  edition === null:
      return "SG21"
    case editions.has(edition):
      return edition  
    default:
      return "SG21"
  }
};

function ref_(rf) {
  const ref = rf.split(/!/)[0];
  const verse = rf.split(/[:]/)[1];
  const bc = rf.split(/[:]/)[0];
  // strip trailing digits
  const book = bc.replace(/\d+$/,"");
  const ch = bc.match(/\d+$/)[0];
  return {verse, ch, book}
}

// DATA as functions
function editions_() {
  return new Set(['KJV','ESV','SG21',"NGU-DE","SCH2000"]);
};
```

```{ojs}
// INPUTS
viewof userRef = html`<input type="text" 
  class="form-control" 
  style="width: 150px;"
  value="ps42:1!KJV"/>`;

// OUTPUTS
outDiv = document.getElementById("outputDiv");

// DATA
bcv = JSON.stringify(bcv_(userRef));
bcv;

```

::: {#outputDiv}
any output comes here
:::
