{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"checkVerse\"\n",
        "image: \"bugsbunny.png\"\n",
        "execute:\n",
        "  echo: false\n",
        "---\n",
        "\n",
        "\n",
        "> check BibleRef's validity with *observableJS.*\n",
        "\n",
        "::: {#outputDivLegacy}\n",
        "OK fetch IF valid ! debounce correctly; bibleBooks OK; todo: match\n",
        ":::\n",
        "\n",
        "\n",
        "```{javascript}\n",
        "document.addEventListener(\"DOMContentLoaded\", () => {\n",
        "    // Check if the mainAnchor div already exists\n",
        "    let mainAnchor = document.getElementById(\"mainAnchor\");\n",
        "    \n",
        "    if (!mainAnchor) {\n",
        "        // Create mainAnchor div if it doesn't exist\n",
        "        mainAnchor = document.createElement(\"div\");\n",
        "        mainAnchor.id = \"mainAnchor\";\n",
        "        mainAnchor.textContent = \"This is the main anchor div.\";\n",
        "        document.body.appendChild(mainAnchor);\n",
        "    }\n",
        "\n",
        "    // Check if outputDiv already exists inside mainAnchor\n",
        "    if (!document.getElementById(\"outputDiv\")) {\n",
        "        // Create outputDiv inside mainAnchor\n",
        "        const outputDiv = document.createElement(\"div\");\n",
        "        outputDiv.id = \"outputDiv\";\n",
        "        outputDiv.textContent = \"This is the output div.\";\n",
        "        mainAnchor.appendChild(outputDiv);\n",
        "    }\n",
        "});\n",
        "```\n",
        "\n",
        "```{ojs}\n",
        "import { html } from \"@observablehq/stdlib\";\n",
        "\n",
        "// Create interactive input field using viewof\n",
        "viewof param = Inputs.text({ \n",
        "  label: \"Search\", \n",
        "  value: \"gen1:1!KJV\"});\n",
        "\n",
        "// Content reactive to input\n",
        "content = await (async (input) => {\n",
        "  // Craft the URL dynamically\n",
        "  const url = `https://hall.pjafischer.workers.dev/passage/?param=${encodeURIComponent(input)}`;\n",
        "  if ( bcve.is_valid ) {\n",
        "      console.log(url);\n",
        "      const response = await fetch(url);\n",
        "      const text = await response.json();\n",
        "      return text;\n",
        "  } else {\n",
        "    return bcve.is_valid\n",
        "  }\n",
        "})(param);\n",
        "\n",
        "// html`<div>${viewof param}</div>`;\n",
        "html`<div>${content.htmlraw}</div>`;\n",
        "\n",
        "//======================================================\n",
        "bcve = ((userref) => {\n",
        "  const editions = new Set(['KJV','SG21',\"NGU-DE\"]);\n",
        "  \n",
        "  // Split by multiple separators: comma, semicolon, and pipe\n",
        "  const [bc,verse,edition=\"SG21\"] = userref.split(/[:!]/);\n",
        "  // emptied edition is doomed invalid \n",
        "  const valid_edition = editions.has(edition) ? edition : \"\"\n",
        "  const book = bc.split(/(\\d+)$/);\n",
        "\n",
        "  const regx = /^[^!]*/;\n",
        "  const regx1 = /^[^:]*/;\n",
        "  const no_edition = userref.match(regx).toString();\n",
        "  const no_verse = no_edition.match(regx1).toString();\n",
        "  \n",
        "  const result = {\n",
        "    \"is_valid\": ( \n",
        "        verse === \"\" || \n",
        "        valid_edition === \"\"\n",
        "        ) ? false : true,\n",
        "    \"edition\": valid_edition,\n",
        "    \"verse\": verse,\n",
        "    \"bc\": bc,\n",
        "    \"book\": book[0],\n",
        "    \"input\": userref\n",
        "  }\n",
        "  \n",
        "  return result\n",
        "})(param);\n",
        "\n",
        "html`<div>VALIDATION is ${JSON.stringify(bcve)}</div>`;\n",
        "\n",
        "check = ((userref) => {\n",
        "    const lowerRef = userref.toLowerCase();\n",
        "\n",
        "    const bibleBooks = {\n",
        "        \"Genesis\": [\"Ge\", \"GEN\"],\n",
        "        \"Exodus\": [\"Ex\", \"EXOD\"],\n",
        "        \"Leviticus\": [\"Lv\", \"LEV\"],\n",
        "        \"Numbers\": [\"Nu\", \"NUM\"],\n",
        "        \"Deuteronomy\": [\"Dt\", \"DEUT\"],\n",
        "        \"Joshua\": [\"Jo\", \"JOSH\",\"Jos\"],\n",
        "        \"Judges\": [\"Jg\", \"JUDG\",'Jug'],\n",
        "        \"Ruth\": [\"Ru\", \"RUTH\",\"Rut\"],\n",
        "        \"1 Samuel\": [\"1S\", \"1SAM\"],\n",
        "        \"2 Samuel\": [\"2M\", \"2SAM\"],\n",
        "        \"1 Kings\": [\"1K\", \"1KGS\"],\n",
        "        \"2 Kings\": [\"2K\", \"2KGS\"],\n",
        "        \"1 Chronicles\": [\"1C\", \"1CHRO\",\"1Chr\"],\n",
        "        \"2 Chronicles\": [\"2C\", \"2CHRO\",\"2Chr\"],\n",
        "        \"Ezra\": [\"Ez\", \"EZRA\",\"Esd\"],\n",
        "        \"Nehemiah\": [\"Nh\", \"NEH\"],\n",
        "        \"Esther\": [\"Es\", \"ESTH\"],\n",
        "        \"Job\": [\"Jb\", \"JOB\"],\n",
        "        \"Psalms\": [\"Ps\", \"PSA\"],\n",
        "        \"Proverbs\": [\"Pv\", \"PROV\"],\n",
        "        \"Ecclesiastes\": [\"Ec\", \"ECC\"],\n",
        "        \"Song of Solomon\": [\"So\", \"SONG\",\"Cc\"],\n",
        "        \"Isaiah\": [\"Is\", \"ISA\"],\n",
        "        \"Jeremiah\": [\"Jr\", \"JER\"],\n",
        "        \"Lamentations\": [\"Lm\", \"LAM\"],\n",
        "        \"Ezekiel\": [\"Ek\", \"EZEK\"],\n",
        "        \"Daniel\": [\"Dn\", \"DAN\"],\n",
        "        \"Hosea\": [\"Ho\", \"HOSEA\"],\n",
        "        \"Joel\": [\"Jl\", \"JOEL\"],\n",
        "        \"Amos\": [\"Am\", \"AMOS\"],\n",
        "        \"Obadiah\": [\"Ob\", \"OBAD\"],\n",
        "        \"Jonah\": [\"Jn\", \"JONAH\"],\n",
        "        \"Micah\": [\"Mc\", \"MICAH\"],\n",
        "        \"Nahum\": [\"Na\", \"NAHUM\"],\n",
        "        \"Habakkuk\": [\"Ha\", \"HAB\"],\n",
        "        \"Zephaniah\": [\"Zp\", \"ZEPH\"],\n",
        "        \"Haggai\": [\"Hg\", \"HAG\"],\n",
        "        \"Zechariah\": [\"Zc\", \"ZECH\"],\n",
        "        \"Malachi\": [\"Ml\", \"MAL\"],\n",
        "        \"Matthew\": [\"Mt\", \"MATT\"],\n",
        "        \"Mark\": [\"Mk\", \"MARK\"],\n",
        "        \"Luke\": [\"Lk\", \"LUKE\"],\n",
        "        \"John\": [\"Jh\", \"JOHN\"],\n",
        "        \"Acts\": [\"Ac\", \"ACTS\"],\n",
        "        \"Romans\": [\"Rm\", \"ROM\"],\n",
        "        \"1 Corinthians\": [\"1O\", \"1COR\"],\n",
        "        \"2 Corinthians\": [\"2O\", \"2COR\"],\n",
        "        \"Galatians\": [\"Ga\", \"GAL\"],\n",
        "        \"Ephesians\": [\"Ep\", \"EPH\"],\n",
        "        \"Philippians\": [\"Ph\", \"PHIL\"],\n",
        "        \"Colossians\": [\"Cl\", \"COL\"],\n",
        "        \"1 Thessalonians\": [\"1T\", \"1THES\"],\n",
        "        \"2 Thessalonians\": [\"2T\", \"2THES\"],\n",
        "        \"1 Timothy\": [\"1I\", \"1TIM\"],\n",
        "        \"2 Timothy\": [\"2I\", \"2TIM\"],\n",
        "        \"Titus\": [\"Ti\", \"TIT\"],\n",
        "        \"Philemon\": [\"Pm\", \"PHILE\"],\n",
        "        \"Hebrews\": [\"He\", \"HEB\"],\n",
        "        \"James\": [\"Jm\", \"JAS\"],\n",
        "        \"1 Peter\": [\"1P\", \"1PET\"],\n",
        "        \"2 Peter\": [\"2P\", \"2PET\"],\n",
        "        \"1 John\": [\"1J\", \"1JOHN\"],\n",
        "        \"2 John\": [\"2J\", \"2JOHN\"],\n",
        "        \"3 John\": [\"3J\", \"3JOHN\"],\n",
        "        \"Jude\": [\"Ju\", \"JUDE\"],\n",
        "        \"Revelation\": [\"Rv\", \"REV\"]\n",
        "    };\n",
        "//    return JSON.stringify(bibleBooks.Ruth) + ${param};\n",
        "      \n",
        "      for (const [book, abbreviations] of Object.entries(bibleBooks)) {\n",
        "        if (book.toLowerCase() === lowerRef) {\n",
        "            return book; // Exact full name match\n",
        "        }\n",
        "        if (abbreviations.some(abbr => abbr.toLowerCase() === lowerRef)) {\n",
        "            return book; // Standard or alternative abbreviation match\n",
        "        }\n",
        "    }\n",
        "    return \"No valid match found\"; // No match case\n",
        "})(param);\n",
        "\n",
        "// html`<div>${viewof param}</div>`;\n",
        "html`<div>${check}</div>`;\n",
        "```"
      ],
      "id": "92d3aa57"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}