---
title: "runVerses"
date: "2025-09-02"
image: "hurdler.jpg"
format: 
  html:
    comments:
      utterances: 
        repo: "fischerpj/ynot"
execute:
  echo: false
---

> **Instant-Display & Local-Memory of Bible Verses** , thanks to reactive *observableJS* branch of accuVerse. Test: Abbreviations PSA

::: {#inputDiv}
<!-- inputDiv is considered Void-->
:::

```{ojs}
import { Inputs } from "@observablehq/inputs";
import { html } from "@observablehq/stdlib";
import { Bcve, Ref } from "./BibleBooksCodes_Tables.js";

_STORAGE_KEY = "prophete";
_STORAGE_VALUE = JSON.parse(localStorage.getItem(_STORAGE_KEY)) || ['gal2:20!KJV'];

// LEGACY was better
/*
// INPUT
viewof userRef = html`
  <input 
    type="text" 
//    oninput="this.dispatchEvent(new CustomEvent('input'))" 
    value= "num1:1!KJV"
    class="form-control" 
    style="width: 150px;"
    >`

// TRIGGER    
viewof appendButton = html`
  <button class="btn btn-primary">Append</button>`

// VIEWOF
html`<div class="row container">
  Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${viewof userRef}
  ${viewof appendButton}
  </div>`
*/

//================== 1. INPUTS
// Editable input field
viewof RefInput = Inputs.text({
  value: _STORAGE_VALUE[Math.floor(Math.random() * _STORAGE_VALUE.length)],
  style: "width: 140px;"
  })

// Inputs
/*viewof RefInput = html`<input type="text" 
//  class="form-control" 
  label= "Search" 
  style="width: 150px;"
  value="ps40"/>`;  
*/

//================== 2. ACCUMULATION
viewof HelpButton =  Inputs.button("Help");

bcve = new Bcve(RefInput);
bcve;

viewof RefAccu = Inputs.button("Keep", {
    value: _STORAGE_VALUE,
    reduce: (list) => {
      const input = viewof RefInput.value;
      const validated = new Bcve(input);
      const result = validated.is_valid ? [validated.param, ...list ] : [...list]
      localStorage.setItem(_STORAGE_KEY, JSON.stringify(result));
      return result
  //    return [validated.param, ...list ]
      }
    });

restyling = {
  // Very Great
  const mib = viewof RefAccu.querySelector('button.btn-quarto');
  if (mib) {
    mib.classList.remove('btn-quarto');
    mib.classList.add('btn-warning');
  }  
  
  const hbut = viewof HelpButton.querySelector('button.btn-quarto');
  if (hbut) {
    hbut.classList.remove('btn-quarto');
    hbut.classList.add('btn-info');
  }  
  
//  viewof RefInput.classList.remove("form-control");

  const mii = viewof RefInput.querySelector('div');
  if (mii) {
    mii.classList.add("form-control");
  }
  
  const inp = mii.querySelector('input');
  if (inp) {
    inp.style.border = "none";
    inp.style.outline = "none";
  }
}

dummy = { 
//  viewof RefInput.classList.add("form-control");
  viewof RefAccu.classList.add("btn", "btn-warning");
  viewof HelpButton.classList.add("btn", "btn-info");
}

// VIEWOF
//html`<div class="button-row">
html`<div class="row container">
  Lookup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ${viewof RefInput}
  ${viewof RefAccu}
  ${viewof HelpButton}
  </div>`

//RefAccu;
```

```{ojs}
//================== INPUT PREVIEW
RefPreview = {
  const mb = new Bcve(RefInput);
  
  if (mb.is_valid) {
    const mir = new Ref(mb.param);
    await mir.fetch_parallel();   // Wait for data to be fetched
    await mir.data;
    await mir.displayData(); 
    return mir.outputContent;
  } else {
    return `<div><ul><li>${mb.param}</li></ul></div>`  
  }
}

html`${RefPreview}`

// Display the list
//html`<ul>${RefData.map(item => html`<li><strong>${item.ref}</strong> ${item.content} <em>${item.version}</em></li>`)}</ul>`
```

```{ojs}
//================== 3. FETCH

RefData = {
  // DATA is imported from BibleBooksCodes_Tables.js
//      const refArray =  RefAccu;
      const mir = new Ref(RefAccu);
      await mir.fetch_parallel();   // Wait for data to be fetched
//      await mir.displayData(); 
//      const displayContent = mir.outputContent;
//      return await mir
    return await mir.data
}

//RefData;

// Display the list
html`<ul>${RefData.map(item => html`<li><strong>${item.ref}</strong> ${item.content} <em>${item.version}</em></li>`)}</ul>`

```

:::: {#outputDiv}
<div>

<!--  any output comes here to outputDiv is considered Void-->

</div>
::::

Jésus est plus grand que les prophètes.

Un prophète transmet les messages de Dieu, sur les sujets d'actualité ou d'avenir. Il est appelé voyant parce qu'il perçoit les réalités invisibles.
